config {
  type: "test",
  description: "Test of multi-table waterfall matching prioritization",
  tags: ["test", "matching", "waterfall"],
  dependencies: ["matching/waterfall_strategy"]
}

-- Create test data with known matches across multiple reference tables
WITH test_data AS (
  -- Source records
  SELECT * FROM (
    SELECT 
      'S1' as source_id,
      'John' as first_name,
      'Smith' as last_name,
      'john.smith@example.com' as email,
      'US' as country
    UNION ALL
    SELECT 
      'S2' as source_id,
      'Jane' as first_name,
      'Doe' as last_name,
      'jane.doe@example.com' as email,
      'UK' as country
  ),

  -- High priority reference table (verified customers)
  verified_customers AS (
    SELECT * FROM (
      SELECT 
        'V1' as ref_id,
        'John' as firstname,
        'Smith' as lastname,
        'A123' as customer_id,
        'VERIFIED' as source,
        0.95 as confidence
      UNION ALL
      SELECT 
        'V2' as ref_id,
        'Jane' as firstname,
        'Doe' as lastname,
        'A456' as customer_id,
        'VERIFIED' as source,
        0.92 as confidence
    )
  ),

  -- Medium priority reference table (CRM records)
  crm_customers AS (
    SELECT * FROM (
      SELECT 
        'C1' as ref_id,
        'John' as firstname,
        'Smith' as lastname,
        'B789' as customer_id,
        'CRM' as source,
        0.85 as confidence
      UNION ALL
      SELECT 
        'C2' as ref_id,
        'Jane' as firstname,
        'Doe' as lastname,
        'B012' as customer_id,
        'CRM' as source,
        0.82 as confidence
    )
  ),

  -- Low priority reference table (web users)
  web_users AS (
    SELECT * FROM (
      SELECT 
        'W1' as ref_id,
        'John' as firstname,
        'Smith' as lastname,
        'C345' as customer_id,
        'WEB' as source,
        0.75 as confidence
      UNION ALL
      SELECT 
        'W2' as ref_id,
        'Jane' as firstname,
        'Doe' as lastname,
        'C678' as customer_id,
        'WEB' as source,
        0.72 as confidence
    )
  ),

  -- Expected results after waterfall matching
  expected_results AS (
    SELECT * FROM (
      -- Should match with verified customers (highest priority)
      SELECT 
        'S1' as source_id,
        'V1' as ref_id,
        'A123' as customer_id,
        'VERIFIED' as source,
        0.95 as confidence
      UNION ALL
      SELECT 
        'S2' as source_id,
        'V2' as ref_id,
        'A456' as customer_id,
        'VERIFIED' as source,
        0.92 as confidence
    )
  )
),

-- Execute waterfall matching using the factory pattern
${ref("matching/waterfall_strategy")}(
  sourceTable => ${ref("test_data")},
  referenceTables => [
    {
      name: ${ref("verified_customers")},
      priority: 1,
      fieldMappings: {
        first_name: "firstname",
        last_name: "lastname"
      },
      requiredFields: ["customer_id"],
      confidenceMultiplier: 1.2
    },
    {
      name: ${ref("crm_customers")},
      priority: 2,
      fieldMappings: {
        first_name: "firstname",
        last_name: "lastname"
      },
      requiredFields: ["customer_id"],
      confidenceMultiplier: 1.0
    },
    {
      name: ${ref("web_users")},
      priority: 3,
      fieldMappings: {
        first_name: "firstname",
        last_name: "lastname"
      },
      requiredFields: ["customer_id"],
      confidenceMultiplier: 0.8
    }
  ],
  outputTable => "waterfall_matches"
) AS waterfall_matches

-- Test 1: Verify match count
SELECT
  'Match count is correct' as test_name,
  COUNT(*) = (SELECT COUNT(*) FROM expected_results) as passed
FROM waterfall_matches

UNION ALL

-- Test 2: Verify highest priority matches were selected
SELECT
  'Highest priority matches selected' as test_name,
  COUNT(*) = (
    SELECT COUNT(*)
    FROM waterfall_matches m
    JOIN expected_results e
    ON m.source_id = e.source_id
    AND m.ref_id = e.ref_id
  ) as passed

UNION ALL

-- Test 3: Verify confidence scores
SELECT
  'Confidence scores are correct' as test_name,
  COUNT(*) = (
    SELECT COUNT(*)
    FROM waterfall_matches m
    JOIN expected_results e
    ON m.source_id = e.source_id
    AND ABS(m.confidence - e.confidence) < 0.001
  ) as passed

UNION ALL

-- Test 4: Verify required fields are present
SELECT
  'Required fields are present' as test_name,
  COUNT(*) = (
    SELECT COUNT(*)
    FROM waterfall_matches m
    WHERE m.customer_id IS NOT NULL
    AND m.source IS NOT NULL
  ) as passed

UNION ALL

-- Test 5: Verify no duplicate matches
SELECT
  'No duplicate matches exist' as test_name,
  COUNT(*) = COUNT(DISTINCT source_id) as passed
FROM waterfall_matches;
