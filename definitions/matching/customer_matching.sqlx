// definitions/matching/customer_matching.sqlx
config {
  type: "table",
  description: "Performs customer matching using recommended rules",
  dependencies: ["rule_recommendation", "source_customers_a", "source_customers_b"]
}

// Import matching engine
const { matchEngine } = require("../../includes/matching/engine");

// Select a goal to use for matching - this could be parameterized, or you could join
// with the rule_recommendation table to get rules for multiple goals.
const matchingGoal = "balanced";

js`
WITH recommended_rules AS (
  SELECT *
  FROM ${ref("rule_recommendation")}
  WHERE goal_name = '${matchingGoal}'
  LIMIT 1
),
unnested_rules AS (
    SELECT 
        rules.rule_type as rule_type,
        rules.rule_name as rule_name,
        CAST(rules.threshold as BIGNUMERIC) as threshold,
        rules.algorithm as algorithm,
        rules.options as options
    FROM recommended_rules
    CROSS JOIN UNNEST(JSON_EXTRACT_ARRAY(recommended_rules.rules, '$')) as rules
)

${matchEngine.generateMatchingSql({
  sourceTableA: "your_project.your_dataset.source_customers_a", // Replace with your actual table
  sourceTableB: "your_project.your_dataset.source_customers_b", // Replace with your actual table
  rulesConfig: "unnested_rules" // Reference the CTE
})}`
