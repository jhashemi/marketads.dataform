/**
 * Dataform Test Utilities
 * 
 * This module provides utility functions for testing Dataform includes
 * and validating SQL generated by JavaScript modules.
 */

/**
 * Creates a temporary test table with sample data
 * 
 * @param {string} tableName - Name for the temporary table
 * @param {Array} columns - Column definitions (name and type)
 * @param {Array} rows - Array of row data
 * @returns {string} SQL to create the temporary table
 */
function createTempTestTable(tableName, columns, rows) {
  const columnDefs = columns.map(col => `${col.name} ${col.type}`).join(', ');
  const rowValues = rows.map(row => {
    const values = columns.map(col => {
      const value = row[col.name];
      if (value === null) return 'NULL';
      if (typeof value === 'string') return `'${value.replace(/'/g, "''")}'`;
      return value;
    }).join(', ');
    return `(${values})`;
  }).join(',\n    ');

  return `
    CREATE OR REPLACE TEMPORARY TABLE ${tableName} (
      ${columnDefs}
    ) AS 
    SELECT * FROM UNNEST([
      ${rowValues}
    ]);
  `;
}

/**
 * Creates a self-contained test case for a Dataform include
 * 
 * @param {string} description - Test case description
 * @param {Object} inputs - Input data and tables
 * @param {Function} testFn - Function that returns a SQL expression using the include
 * @param {Function} assertFn - Function that checks the result
 * @returns {string} Complete SQL test case
 */
function createIncludeTest(description, inputs, testFn, assertFn) {
  // Generate setup SQL
  const setupSql = Object.entries(inputs.tables || {})
    .map(([tableName, tableInfo]) => 
      createTempTestTable(tableName, tableInfo.columns, tableInfo.rows)
    )
    .join('\n\n');
  
  // Generate test SQL
  const testSql = testFn(inputs);
  
  // Generate assertion SQL
  const assertionSql = assertFn(inputs);
  
  return `
    -- Test: ${description}
    
    -- Setup test data
    ${setupSql}
    
    -- Run test
    WITH test_result AS (
      ${testSql}
    )
    
    -- Assert result
    ${assertionSql}
  `;
}

/**
 * Creates a simple assertion that test succeeds only if exactly one row with value='PASS' is returned
 * 
 * @returns {string} SQL assertion
 */
function createPassFailAssertion() {
  return `
    SELECT
      CASE
        WHEN COUNT(*) = 0 THEN 'FAIL: No rows returned'
        WHEN COUNT(*) > 1 THEN 'FAIL: Too many rows returned'
        WHEN value != 'PASS' THEN 'FAIL: ' || value
        ELSE 'PASS'
      END AS result
    FROM test_result
  `;
}

module.exports = {
  createTempTestTable,
  createIncludeTest,
  createPassFailAssertion
}; 